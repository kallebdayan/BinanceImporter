# install.py
"""
Script de instala√ß√£o e configura√ß√£o inicial
"""

import os
import subprocess
import sys
import mysql.connector
from pathlib import Path

def install_requirements():
    """Instala as depend√™ncias"""
    print("üì¶ Instalando depend√™ncias...")
    subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"])
    print("‚úÖ Depend√™ncias instaladas com sucesso!")

def create_env_file():
    """Cria arquivo .env se n√£o existir"""
    env_file = Path(".env")
    if not env_file.exists():
        print("‚öôÔ∏è  Criando arquivo .env...")
        
        db_host = input("Host MySQL (localhost): ") or "localhost"
        db_port = input("Porta MySQL (3306): ") or "3306"
        db_name = input("Nome do banco (binance_crypto): ") or "binance_crypto"
        db_user = input("Usu√°rio MySQL: ")
        db_password = input("Senha MySQL: ")
        
        env_content = f"""# Configura√ß√µes do Banco de Dados MySQL
DB_HOST={db_host}
DB_PORT={db_port}
DB_NAME={db_name}
DB_USER={db_user}
DB_PASSWORD={db_password}

# Configura√ß√µes opcionais
LOG_LEVEL=INFO
MAX_RETRIES=3
TIMEOUT=30
"""
        
        with open(".env", "w") as f:
            f.write(env_content)
        
        print("‚úÖ Arquivo .env criado!")
    else:
        print("‚ÑπÔ∏è  Arquivo .env j√° existe")

def test_database_connection():
    """Testa conex√£o com o banco de dados"""
    print("üîå Testando conex√£o com banco de dados...")
    
    from config import DATABASE_CONFIG
    print(DATABASE_CONFIG)
    
    try:
        
        connection = mysql.connector.connect(**DATABASE_CONFIG)
        print("‚úÖ Conex√£o com banco de dados estabelecida!")
        connection.close()
        return True
    except mysql.connector.Error as e:
        print(f"‚ùå Erro na conex√£o: {e}")
        return False

def create_database_structure():
    """Executa os scripts SQL para criar a estrutura"""
    print("üèóÔ∏è  Criando estrutura do banco de dados...")
    
    # Aqui voc√™ executaria os comandos SQL da estrutura
    # Por simplicidade, apenas mostra a mensagem
    print("‚ÑπÔ∏è  Execute manualmente os comandos SQL fornecidos para criar as tabelas")
    print("   e triggers no seu banco MySQL.")

def main():
    """Fun√ß√£o principal de instala√ß√£o"""
    print("üöÄ INSTALADOR BINANCE CRYPTO IMPORTER")
    print("=" * 40)
    
    try:
        # 1. Instalar depend√™ncias
        install_requirements()
        
        # 2. Criar arquivo .env
        create_env_file()
        
        # 3. Testar conex√£o
        if test_database_connection():
            # 4. Informar sobre estrutura do banco
            create_database_structure()
            
            print("\nüéâ INSTALA√á√ÉO CONCLU√çDA!")
            print("\nPr√≥ximos passos:")
            print("1. Execute os comandos SQL para criar tabelas e triggers")
            print("2. Execute: python binance_importer.py (importa√ß√£o √∫nica)")
            print("3. Execute: python scheduler.py (importa√ß√£o autom√°tica)")
            print("4. Execute: python monitor.py (monitoramento)")
        else:
            print("\n‚ùå Configura√ß√£o incompleta. Verifique as configura√ß√µes do banco.")
            
    except Exception as e:
        print(f"\n‚ùå Erro durante instala√ß√£o: {e}")

if __name__ == "__main__":
    main()